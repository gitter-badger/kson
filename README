KSON: Keystripped Schemafied Object Notation
============================================

KSON is a simple data interchange format based on JSON. It has a more
compact serialized representation and requires only a minimal javscript
library to parse and serialize. KSON removes keys from its serailized
representation and defines an extensible codec mechanism to further
reduce the size of serialized data. KSON uses a simple schema format
to describe arbitrarrily nested objects.


Example
-------

KSON schema definitions in JSON:

    {
        "id": "movie",
        "fields": ["title", "year", "rating", "cover", "actors"],
        "meta": [0, 0, 0, "prefix(http://movies.db/covers/)", "[]role"]
    }

    {
        "id": "role",
        "fields": ["name", "character"],
        "meta": [0, 0]
    }

JSON Data:

    [
        {
           "title": "Forrest Gump",
           "year": 1994,
           "rating": 8.7,
           "cover": "http://movies.db/covers/8.jpg",
           "actors": [
                {"name": "Tom Hanks", "character": "Forest Gump"},
                {"name": "Robin Wright", "character": "Jenny Curran"},
                {"name": "Gary Sinise", "character": "Lieutenant Dan Taylor"}
           ]
        },
        {
            "title": "Toy Story",
            ...
        }
        ...
    ]

KSON Data:

    [
      "[]movie",
      "Forest Gump",
      1994,
      8.7,
      "8.jpg",
      [
            ["Tom Hanks", "Forest Gump"],
            ["Robin Wright", "Jenny Curran"],
            ["Gary Sinise", "Lieutenant Dan Taylor"]
      ],
      "Toy Story",
      ...
    ]

Of course the "movie" and "role" schema definitions may also be
serialized to KSON using the "schema" schema:

    ["schema", "movie",
        ["title", "year", "rating", "cover", "actors"],
        [0, 0, 0, "prefix(http://movies.db/covers/)", "[]role"]
    ]
    ["schema", "role", ["name", "character"], [0, 0]]


The "schema" schema for KSON has the identifier "schema" and its own
schema definition in JSON looks like this:

    {
        "id": "schema",
        "fields": ["id", "fields", "meta"],
        "meta": [0, "[]", "[]"]
    }

The same definition in KSON would in theory look like this:

    ["schema", ["id", "fields", "meta"], [0, "[]", "[]"]]

but of course no KSON library could parse this without having parsed 
it first..., so a library must be initialized/bootstraped with this
schema definiton by another means before being able to parse any
further schema definitions. Meta enough for you yet?



Q: Why should I use this instead of JSON/MessagePack/Thrift/...?
A: Unless you are targeting the browser you shouldn't. If you are,
   then size and speed of the libraries needed to use these formats
   in the browser may be prohibitive.

Q: Is it faster than JSON?
A: Tests using node.js indicate that parsing is marginally slower.
   This may be outweighed by faster transmission speed of signifigantly
   less data.

Q: Is this a drop in replacement for JSON?
A: No, you will need to write schema definitions for your data. Automatic
   schema detection based on example data may help in getting started.
   The top level elements in KSON data is also restricted to be either an
   *array* or an *object*.

Q: Why a new schema format?
A: Existing JSON schemas formats include extrenious information to the
   purpose of KSON and would require larger javascript library for
   parsing and serialization.


Schema Specification:

A KSON schema consists of three fields:
    id              *string* identifier
    fields          *array* of field names
    meta            *array* signifying the types associated with
                    corresponding elements in the *fields* array.

A schema only defines one object. Nesting is accomplished by referencing
subschemas via their id in the meta array.

An element of *meta* specifies the content of the element of *fields* at
the same index. The lengths of the *fields* and *meta* arrays must be equal.
An element of *meta* must be one of the following:
    0                field contains a plain value of type
                     *string*, *boolean*, *number*, *null*.
    "[]"             *array* of plain values
    "schema-id"      *string* reference the schema of a nested object
    "[]schema-id"    
    "codec-id"
    "[]codec-id"

Codecs
------

Decoders are executed in the order of their definition in the meta field.
The decoder is passed the value to decode as the first argument and the
intermediate data object as the second. The intermediate object will have
the values of all previous fields decoded and applied.


Installation
------------

  $ apt-get install python-pip
  $ pip install kson

  $ yum install python-pip
  $ python-pip install kson

  $ npm install kson -g


Automatic schema detection:
  
  $ kson --auto-detect data.json --id schema_id
