KSON: Keystripped Schemafied Object Notation
============================================

KSON is a simple data interchange format based on JSON. Its serialized
representation doesn't contain the redundant keys of typical json 
documents and more compact representations of values through
an extensible encoding/decoding mechanism.

KSON uses a simple schema format to describe arbitrarrily nested objects
and encoded types. The minified and gzipped javascript library is < 1K.


Usage in javascript
-------------------

    // Load schema definitions

    var movie_schemas = [
      {
        "id": "role",
        "fields": ["name", "character"],
        "meta": [0, 0]
      },{
        "id": "movie",
        "fields": ["title", "year", "rating", "cover", "actors"],
        "meta": [0, 0, 0, "prefix:http\://movies.db/covers/|suffix.jpg", "[]role"]
      }
    ];
    KSON.addSchema(movie_schemas);

    var movies = [
      {
       "title": "Forrest Gump",
       "year": 1994,
       "rating": 8.7,
       "cover": "http://movies.db/covers/8.jpg",
       "actors": [
        {"name": "Tom Hanks", "character": "Forest Gump"},
        {"name": "Robin Wright", "character": "Jenny Curran"},
        {"name": "Gary Sinise", "character": "Lieutenant Dan Taylor"}
       ]
      },
      {
        "title": "Toy Story",
        ...
      }
      ...
    ];

    // pretty printing is not part of the library
    console.log(KSON.stringify(movies, "[]movie"));
    [
      "[]movie",
      "Forest Gump",
      1994,
      8.7,
      "8",
      [
        ["Tom Hanks", "Forest Gump"],
        ["Robin Wright", "Jenny Curran"],
        ["Gary Sinise", "Lieutenant Dan Taylor"]
      ],
      "Toy Story",
      ...
    ]

    // Of course the "movie" and "role" schema definitions may also be
    // serialized to KSON using the "schema" schema:

    var schema_data = KSON.stringify(movie_schemas, "[]schema")
    console.log(schema_data);

    ["[]schema","role",["name","character"],[0, 0],"movie",
      ["title","year","rating","cover","actors"],
      [0,0,0,"prefix:http\://movies.db/covers/|suffix:.jpg","[]role"]]

    // Likewise schemas can be initialized with a kson document
    KSON.addSchema(schema_data);

FAQ
---

Q: Why should I use this instead of JSON/MessagePack/Thrift/...?
A: Unless you are targeting the browser you probably shouldn't. If you
   are, then the size and speed of the javascript libraries for these
   formats may make KSON a favorable option.

Q: Is KSON faster/smaller/better than JSON?
A: Tests using node.js indicate that parsing is marginally slower. This
   should be outweighed by faster transmission speed of signifigantly less
   data. See the node.js benchmarks for more info.

Q: Is this a drop in replacement for JSON?
A: No, you will need to write schema definitions for your data. Automatic
   schema detection based on example data may help in getting started.
   The top level elements of a KSON document must be either an *array* of
   objects or an *object*, it cannot serialize just a plain value or
   only an *array* of plain values.

Q: Why yet another a schema format for JSON?
A: Existing JSON schema formats include extrenious information to the
   purpose of KSON and would require larger javascript library for
   parsing and serialization.

Q: Is their language support for php/ruby/java/c...?
A: Currently javascript and python are supported. Porting to other
   languages with existing JSON support should be fairly easy and patches
   are very welcome.


Schema Specification:

A KSON schema consists of three fields:
    id              *string* identifier
    fields          *array* of field names
    meta            *array* signifying the types associated with
                    corresponding elements in the *fields* array.

A schema only defines one object. Nesting is accomplished by referencing
subschemas via their id in the meta array.

An element of *meta* specifies the content of the element of *fields* at
the same index. The lengths of the *fields* and *meta* arrays must be equal.
An element of *meta* must be one of the following:
    0                field contains a plain value of type
                     *string*, *boolean*, *number*, *null*.
    "[]"             *array* of plain values
    "schema-id"      *string* reference the schema of a nested object
    "[]schema-id"    
    "codec-id"
    "[]codec-id"

Codecs
------

Decoders are executed in the order of their definition in the meta field.
The decoder is passed the value to decode as the first argument and the
intermediate data object as the second. The intermediate object will have
the values of all previous fields decoded and applied.


Included codecs:

  prefix:egg     "eggbacon" -> "bacon"
  suffix:bacon   "eggsausagebacon" -> "eggsausage"
  bool           true -> 1, false -> 0
  date           new Date() -> 1364938727390
  int36          1364938727390 -> "hf1lcnka"


Codec chaining

  prefix:egg|suffix:bacon    "eggsausagebacon" -> "sausage"
  date|int36    new Date() -> "hf1lcnka"


Installation
------------

    $ pip install kson

Automatic schema detection:
  
    $ kson --auto-detect data.json --id schema_id


Development
-----------

    $ git clone git@bitbucket.org:mbarkhau/kson.git
    $ npm install uglify-js -g
    $ npm install benchmark microtime

    $ pip install py.test

    $ make test
    $ make bench
    $ make minify


